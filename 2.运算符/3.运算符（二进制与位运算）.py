# 二进制与位运算

# 十进制数  转为  二进制数
# a = 125
'''
print(125 // 2, 125 % 2)
125 // 2  商 62  余 1
62 // 2  商 31   余 0
31 // 2  商 15   余 1
15 // 2  商 7   余 1
7 // 2  商 3   余 1
3 // 2  商 1   余 1
1 // 2  商 0   余 1
按照计算的结果，把余数从低位到高位依次排列
1 1 1 1 1 0 1
'''
# bin() 可以转为  二进制数
# print(bin(125))  # 0b1111101

# 二进制 转为 十进制
# 按权展开求和
# n = 0b1111101
'''
1 ==> 1*2**6 ==> 64
1 ==> 1*2**5 ==> 32
1 ==> 1*2**4 ==> 16
1 ==> 1*2**3 ==> 8
1 ==> 1*2**2 ==> 4
0 ==> 0*2**1 ==> 0
1 ==> 1*2**0 ==> 1
'''
# print(64+32+16+8+4+1)
# int()把二进制转为十进制
# print(int(0b1111101))

# 作业：把十进制的数  转为 二进制 9990977
# print(bin(9990977)) # 0b100110000111001101000001


# & 按位与运算符：参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0
a = 60
b = 13
# print(bin(a), bin(b))
# print(a & b)
'''
a的二进制值为：0b111100
b的二进制值为：0b001101

a & b ==> 001100
1 ==> 1*2**3 ==> 8
1 ==> 1*2**2 ==> 4
0 ==> 0*2**1 ==> 0
0 ==> 0*2**0 ==> 0
对001100换算十进制等于 12
'''

# | 按位或运算符：只要对应的两个二进位有一个为1时，结果位就为1
'''
a的二进制值为：0b111100
b的二进制值为：0b001101

a | b ==> 111101
对111101换算十进制等于 61
'''

# ^ 按位异或运算符：只要对应的两个二进位相异时，结果位为1
'''
a的二进制值为：0b111100
b的二进制值为：0b001101
a ^ b = 110001 = 49
'''

# 左移动运算符：运算数的各二进位全部左移若干位，由'<<'右边的数指定移动的位数，高位丢弃，低位补0
# print(a << 2)
'''
a的二进制值为：0b 111100
原二进制值补0 得到00111100，然后左移两位 得到 11110000
对 11110000 换算十进制得到240
'''

# 右移动运算符
# print(a >> 2)






























