# 设计模式-Mixin混合设计模式

'''
继承需要有一个必要的前提，继承应该是一个 'is-a' 的关系
例如：
    苹果类可以去继承水果类，因为苹果就是一个水果
    苹果不能继承午饭，因为午饭可以有苹果也可以没有

    汽车类可以去继承交通工具类，因为汽车本身就是一个交通工具

交通工具有哪些？
    汽车、飞机、直升机，这些都属于交通工具
    如何去设计这些类的关系呢？
    比如：创建一个交通工具类，属于交通工具的都来继承，再去实现
    但是，飞机和直升机都有飞行的功能，而汽车没有。那么在交通工具中如果去定义 飞行 功能，就不太合适了
    能不能在飞机和直升机类中分别实现 飞行 功能？可以，但是代码又无法重用

    单独去定义交通工具和飞行器这两个父类，这样，飞机和直升机就可以去继承这两个类，但是出现了一个问题？
    这样会出现多重继承的关系，又违背了 'is-a' 的原则？

    java语言中可以通过 interface 接口类，来实现多重继承
    python中本身就支持 多继承关系
'''

# 交通工具 vehicle
class vehicle():
    # 运输货物
    def huo(self):
        print('运输货物')
    # 搭载乘客
    def ren(self):
        print('搭载乘客')

'''
此时去定义一个飞行器的类，让需要飞行的交通工具直接继承这个类
但是，出现了多继承，违背了 'is-a'；飞行器类很容易被误解
解决方案也是使用多继承，但是给飞行器这个类定义成为一个 Mixin 混合类
此时就是等于把飞行器这个类，作为了一个扩展的功能，来扩展其它类
'''
# 飞行器
class FlyingMixin():
    def fly(self):
        print('可以起飞了')

# 定义汽车类
class Cart(vehicle):
    pass

# 定义飞机
class Airplane(vehicle,FlyingMixin):
    pass

# 定义直升机
class Helicopter(vehicle,FlyingMixin):
    pass

'''
在上面的代码中，虽然直升机和飞机都使用了多继承，也就是继承了FlyingMixin
但是由于 FlyingMixin 类加上了 Mixin 这个名，就告诉后面阅读代码的人，这个类是一个Mixin 混合类

Mixin 表示混入（mix-in）
    Mixin 必须是表示一种功能，而不是一个对象
    Mixin 的功能必须单一，如果有多个功能，那就多定义几个 Mixin 类
    python中的Mixin是通过多继承实现的
    Mixin这个类通常不单独使用，而是混合到其它类中去增加功能
    Mixin类不以来子类的实现，即便子类没有继承Mixin，子类也能正常运行，可能就是缺少了一些功能

使用 Mixin 混入类的好处？
    1.Mixin 这个混入类的设计模式，在不对类的内容修改的前提下，扩展了类的功能
    2.Mixin 婚如雷为了提高代码的重用性，使得代码结构更加简单清晰
    3.可以根据开发需求任意调整功能（创建新的 Mixin 混入类）
    4.避免设计多层次的复杂的继承关系
'''













































