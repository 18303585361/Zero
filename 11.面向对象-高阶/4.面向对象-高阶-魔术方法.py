# 魔术方法

'''
魔术方法：
    不需要手动调用就可以自动执行的方法
1.__init__    初始化方法
    触发机制：当实例化对象之后就会立即触发的方法
    作用： 为当前创建的对象完成一些初始化的操作，比如：成员属性赋值，方法调用，打开或创建一些资源
    参数： 一个 self，接收当前对象，其它参数根据需求进行定义即可
    返回值：无（None）
    注意事项：无
2.__del__   析构方法
    触发机制：当该类对象被销毁时自动触发
    作用： 关闭或释放对象创建时打开或创建的一些资源
    参数： 一个 self，接收当前对象
    返回值：无（None）
    注意事项：无
3.__new__   构造方法
    触发机制：   实例化对象时自动触发（在__init__之前触发）
    作用： 管理控制对象创建的过程
    参数： 一个 cls 接收当前类，其它参数根据初始化方法的参数进行决定
    返回值： 必须返回 object.__new__(cls)进行对象的创建；
            如果没有返回值，则实例化对象的结果为 None
    注意事项：__new__方法的参数和__init__方法的参数要保持一致，除了第一个参数
    应用模式：设计模式中的单例设计模式
4.__call__
    触发机制：把对象当作函数调用时直接触发
    作用： 一般用于归纳类/对象的操作步骤，方便调用
    参数： 一个 self 接收当前对象，其它参数根据调用需求确定
    返回值：可有可无

'''
# 定义一个人类
class Person():
    # 构造方法
    def __new__(cls, *args, **kwargs):
        print('触发了构造方法')
        print(args)
        print(cls)

        # 如果在该方法中没有返回对象，则无法创建对象
        return object.__new__(cls)
    # 初始化方法
    def __init__(self,name,age,sex):
        print('触发了初始化方法')
        self.name = name
        self.age = age
        self.sex = sex

    def __call__(self, *args, **kwargs):
        print('你把对象当成了函数进行调用')
    # 析构方法
    def __del__(self):
        print('触发了析构方法')

# 实例化对象
zs = Person('张三丰',180,'男')
# print(zs)
zs()

























































